===============================================================================
                    ESPECIFICACIONES T√âCNICAS DEL PROYECTO
                         projectPruebasApis - Backend API
                    Para Integraci√≥n con Frontend (React/Vue/Angular)
===============================================================================

üéØ INFORMACI√ìN GENERAL DEL PROYECTO
=====================================

Nombre del Proyecto: projectPruebasApis
Tipo: API REST Reactiva con Spring Boot
Base URL: http://localhost:8080
Arquitectura: Microservicio reactivo con Spring WebFlux
Base de Datos: PostgreSQL (Neon Cloud)
Patr√≥n de Eliminaci√≥n: Eliminado L√≥gico (is_active = true/false)

üìã STACK TECNOL√ìGICO BACKEND
===============================

Framework Principal: Spring Boot 3.4.4
Lenguaje: Java 17
Programaci√≥n Reactiva: Spring WebFlux + Project Reactor
Base de Datos: PostgreSQL (R2DBC para acceso reactivo)
APIs Externas: RapidAPI (AI Movie Recommender, JSearch)
Documentaci√≥n: Swagger UI en /swagger-ui.html
Build Tool: Maven
Contenedores: Docker (opcional)

üåê ARQUITECTURA DE LA API
===========================

Patr√≥n Arquitect√≥nico: Layered Architecture
Controladores ‚Üí Servicios ‚Üí Repositorios ‚Üí Base de Datos/APIs Externas

Programaci√≥n Reactiva:
- Mono<T>: Para respuestas de un solo elemento
- Flux<T>: Para respuestas de m√∫ltiples elementos
- ApiResponse<T>: Wrapper est√°ndar para todas las respuestas

üîó ENDPOINTS PRINCIPALES DE LA API
====================================

üìå BASE URL: http://localhost:8080

===============================================================================
üé¨ M√ìDULO MOVIES - /api/movies
===============================================================================

1Ô∏è‚É£ CREAR PEL√çCULA
   POST /api/movies
   Content-Type: application/json
   
   Request Body:
   {
     "movieId": "string (√∫nico, obligatorio)",
     "title": "string (obligatorio)",
     "overview": "string (opcional)",
     "posterPath": "string (opcional)",
     "releaseDate": "string (opcional, formato: YYYY-MM-DD)",
     "voteAverage": "number (0.0-10.0, opcional)",
     "voteCount": "number (‚â•0, opcional)",
     "popularity": "number (‚â•0, opcional)",
     "genreIds": "string (opcional, formato: 1,2,3)"
   }
   
   Response 201:
   {
     "success": true,
     "message": "Pel√≠cula creada exitosamente",
     "data": {MovieEntity},
     "hasData": true,
     "timestamp": "2024-01-01T12:00:00Z"
   }

2Ô∏è‚É£ OBTENER PEL√çCULA POR ID
   GET /api/movies/{id}
   
   Response 200:
   {
     "success": true,
     "message": "Pel√≠cula encontrada",
     "data": {MovieEntity},
     "hasData": true,
     "timestamp": "2024-01-01T12:00:00Z"
   }
   
   Response 404: Not Found (si no existe o est√° eliminada)

3Ô∏è‚É£ ACTUALIZAR PEL√çCULA
   PUT /api/movies/{id}
   Content-Type: application/json
   
   Request Body:
   {
     "title": "string (obligatorio)",
     "overview": "string (opcional)",
     "posterPath": "string (opcional)",
     "releaseDate": "string (opcional)",
     "voteAverage": "number (0.0-10.0, opcional)",
     "voteCount": "number (‚â•0, opcional)",
     "popularity": "number (‚â•0, opcional)",
     "genreIds": "string (opcional)"
   }

4Ô∏è‚É£ ELIMINAR PEL√çCULA (L√ìGICO)
   DELETE /api/movies/{id}
   
   Response 200:
   {
     "success": true,
     "message": "Pel√≠cula eliminada exitosamente",
     "data": null,
     "hasData": false,
     "timestamp": "2024-01-01T12:00:00Z"
   }

5Ô∏è‚É£ RESTAURAR PEL√çCULA
   PATCH /api/movies/{id}/restore
   
   Response 200:
   {
     "success": true,
     "message": "Pel√≠cula restaurada exitosamente",
     "data": null,
     "hasData": false,
     "timestamp": "2024-01-01T12:00:00Z"
   }

6Ô∏è‚É£ LISTAR TODAS LAS PEL√çCULAS ACTIVAS
   GET /api/movies
   
   Response 200:
   {
     "success": true,
     "message": "Pel√≠culas obtenidas correctamente",
     "data": [MovieEntity array],
     "hasData": true,
     "timestamp": "2024-01-01T12:00:00Z"
   }

7Ô∏è‚É£ BUSCAR PEL√çCULAS POR T√çTULO (BASE DE DATOS)
   GET /api/movies/search-by-title?title={searchTerm}
   
   Busca en la base de datos local, insensible a may√∫sculas

8Ô∏è‚É£ BUSCAR PEL√çCULAS EN API EXTERNA
   GET /api/movies/search?title={movieTitle}
   
   Busca en RapidAPI y guarda resultados en base de datos

9Ô∏è‚É£ OBTENER PEL√çCULA POR T√çTULO (API EXTERNA)
   GET /api/movies/getID?title={movieTitle}
   
   Obtiene detalles espec√≠ficos desde RapidAPI

===============================================================================
üíº M√ìDULO JOBS - /api/jobs
===============================================================================

1Ô∏è‚É£ CREAR TRABAJO
   POST /api/jobs
   Content-Type: application/json
   
   Request Body:
   {
     "jobId": "string (√∫nico, obligatorio)",
     "employerName": "string (obligatorio)",
     "jobTitle": "string (obligatorio)",
     "jobDescription": "string (opcional)",
     "jobCountry": "string (opcional)",
     "jobCity": "string (opcional)",
     "jobPostedAt": "string (opcional)",
     "jobApplyLink": "string (opcional)",
     "jobEmploymentType": "string (opcional)"
   }

2Ô∏è‚É£ OBTENER TRABAJO POR ID
   GET /api/jobs/{id}

3Ô∏è‚É£ ACTUALIZAR TRABAJO
   PUT /api/jobs/{id}
   Content-Type: application/json
   
   Request Body:
   {
     "employerName": "string (obligatorio)",
     "jobTitle": "string (obligatorio)",
     "jobDescription": "string (opcional)",
     "jobCountry": "string (opcional)",
     "jobCity": "string (opcional)",
     "jobPostedAt": "string (opcional)",
     "jobApplyLink": "string (opcional)",
     "jobEmploymentType": "string (opcional)"
   }

4Ô∏è‚É£ ELIMINAR TRABAJO (L√ìGICO)
   DELETE /api/jobs/{id}

5Ô∏è‚É£ RESTAURAR TRABAJO
   PATCH /api/jobs/{id}/restore

6Ô∏è‚É£ LISTAR TODOS LOS TRABAJOS ACTIVOS
   GET /api/jobs

7Ô∏è‚É£ BUSCAR TRABAJOS POR T√çTULO
   GET /api/jobs/search-by-title?title={searchTerm}

8Ô∏è‚É£ BUSCAR TRABAJOS POR EMPRESA
   GET /api/jobs/search-by-employer?employer={companyName}

9Ô∏è‚É£ BUSCAR TRABAJOS POR PA√çS
   GET /api/jobs/search-by-country?country={countryName}

üîü BUSCAR TRABAJOS POR CIUDAD
   GET /api/jobs/search-by-city?city={cityName}

1Ô∏è‚É£1Ô∏è‚É£ BUSCAR TRABAJOS EN API EXTERNA
   GET /api/jobs/search?query={searchTerm}&country={country}&page={page}&numPages={numPages}
   
   Par√°metros:
   - query (obligatorio): t√©rmino de b√∫squeda
   - country (opcional, default: "us"): c√≥digo de pa√≠s
   - page (opcional, default: 1): p√°gina actual
   - numPages (opcional, default: 1): n√∫mero de p√°ginas

===============================================================================
üìä ESTRUCTURAS DE DATOS
===============================================================================

üé¨ MovieEntity:
{
  "id": "number (Primary Key)",
  "movieId": "string (Unique)",
  "title": "string",
  "overview": "string",
  "posterPath": "string",
  "releaseDate": "string",
  "voteAverage": "number",
  "voteCount": "number",
  "popularity": "number",
  "genreIds": "string",
  "searchDate": "string",
  "createdAt": "LocalDateTime",
  "updatedAt": "LocalDateTime",
  "isActive": "boolean"
}

üíº JobEntity:
{
  "id": "number (Primary Key)",
  "jobId": "string (Unique)",
  "employerName": "string",
  "jobTitle": "string",
  "jobDescription": "string",
  "jobCountry": "string",
  "jobCity": "string",
  "jobPostedAt": "string",
  "jobApplyLink": "string",
  "jobEmploymentType": "string",
  "searchDate": "string",
  "createdAt": "LocalDateTime",
  "updatedAt": "LocalDateTime",
  "isActive": "boolean"
}

üìã ApiResponse<T> (Wrapper para todas las respuestas):
{
  "success": "boolean",
  "message": "string",
  "data": "T (generic type)",
  "hasData": "boolean",
  "timestamp": "string (ISO format)"
}

===============================================================================
üö¶ C√ìDIGOS DE RESPUESTA HTTP
===============================================================================

200 OK - Operaci√≥n exitosa
201 Created - Recurso creado exitosamente
400 Bad Request - Error en la solicitud o validaci√≥n
404 Not Found - Recurso no encontrado
500 Internal Server Error - Error del servidor

===============================================================================
üîß CONFIGURACI√ìN PARA EL FRONTEND
===============================================================================

üìå Variables de Entorno Recomendadas para Frontend:

REACT_APP_API_BASE_URL=http://localhost:8080
REACT_APP_API_MOVIES_ENDPOINT=/api/movies
REACT_APP_API_JOBS_ENDPOINT=/api/jobs

üìå Headers Requeridos:

Content-Type: application/json (para POST/PUT)
Accept: application/json

üìå Manejo de Errores:

Todas las respuestas de error siguen el formato ApiResponse:
{
  "success": false,
  "message": "Descripci√≥n del error",
  "data": null,
  "hasData": false,
  "timestamp": "2024-01-01T12:00:00Z"
}

===============================================================================
üîÑ EJEMPLOS DE INTEGRACI√ìN FRONTEND
===============================================================================

üìå JavaScript/Fetch API:

// Crear pel√≠cula
const createMovie = async (movieData) => {
  const response = await fetch('http://localhost:8080/api/movies', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(movieData)
  });
  return await response.json();
};

// Obtener todas las pel√≠culas
const getMovies = async () => {
  const response = await fetch('http://localhost:8080/api/movies');
  return await response.json();
};

// Buscar pel√≠culas
const searchMovies = async (title) => {
  const response = await fetch(`http://localhost:8080/api/movies/search-by-title?title=${encodeURIComponent(title)}`);
  return await response.json();
};

// Eliminar pel√≠cula (l√≥gico)
const deleteMovie = async (id) => {
  const response = await fetch(`http://localhost:8080/api/movies/${id}`, {
    method: 'DELETE'
  });
  return await response.json();
};

üìå Axios (Recomendado para React):

import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8080',
  headers: {
    'Content-Type': 'application/json'
  }
});

// Interceptor para manejar respuestas
api.interceptors.response.use(
  response => response.data,
  error => {
    console.error('API Error:', error);
    return Promise.reject(error);
  }
);

export const movieService = {
  getAll: () => api.get('/api/movies'),
  getById: (id) => api.get(`/api/movies/${id}`),
  create: (data) => api.post('/api/movies', data),
  update: (id, data) => api.put(`/api/movies/${id}`, data),
  delete: (id) => api.delete(`/api/movies/${id}`),
  restore: (id) => api.patch(`/api/movies/${id}/restore`),
  searchByTitle: (title) => api.get(`/api/movies/search-by-title?title=${title}`),
  searchExternal: (title) => api.get(`/api/movies/search?title=${title}`)
};

export const jobService = {
  getAll: () => api.get('/api/jobs'),
  getById: (id) => api.get(`/api/jobs/${id}`),
  create: (data) => api.post('/api/jobs', data),
  update: (id, data) => api.put(`/api/jobs/${id}`, data),
  delete: (id) => api.delete(`/api/jobs/${id}`),
  restore: (id) => api.patch(`/api/jobs/${id}/restore`),
  searchByTitle: (title) => api.get(`/api/jobs/search-by-title?title=${title}`),
  searchByEmployer: (employer) => api.get(`/api/jobs/search-by-employer?employer=${employer}`),
  searchByCountry: (country) => api.get(`/api/jobs/search-by-country?country=${country}`),
  searchByCity: (city) => api.get(`/api/jobs/search-by-city?city=${city}`),
  searchExternal: (query, country = 'us', page = 1, numPages = 1) => 
    api.get(`/api/jobs/search?query=${query}&country=${country}&page=${page}&numPages=${numPages}`)
};

===============================================================================
üé® RECOMENDACIONES PARA LA UI/UX
===============================================================================

üìå Componentes Sugeridos:

1. MovieList - Lista de pel√≠culas con paginaci√≥n
2. MovieCard - Tarjeta individual de pel√≠cula
3. MovieForm - Formulario para crear/editar pel√≠culas
4. MovieDetail - Vista detallada de pel√≠cula
5. SearchBar - Barra de b√∫squeda con filtros

6. JobList - Lista de trabajos con filtros
7. JobCard - Tarjeta individual de trabajo
8. JobForm - Formulario para crear/editar trabajos
9. JobDetail - Vista detallada de trabajo
10. FilterPanel - Panel de filtros avanzados

üìå Estados a Manejar:

- loading: boolean (para mostrar spinners)
- error: string | null (para mostrar errores)
- data: array | object (datos de la API)
- pagination: object (para paginaci√≥n)
- filters: object (para filtros de b√∫squeda)

üìå Funcionalidades Clave:

1. CRUD completo para pel√≠culas y trabajos
2. B√∫squeda en tiempo real
3. Filtros avanzados
4. Paginaci√≥n
5. Confirmaci√≥n antes de eliminar
6. Opci√≥n de restaurar elementos eliminados
7. Validaci√≥n de formularios
8. Manejo de errores amigable
9. Loading states
10. Responsive design

===============================================================================
üîí CONSIDERACIONES DE SEGURIDAD
===============================================================================

üìå CORS:
El backend debe configurar CORS para permitir requests desde el frontend.
Actualmente permite todas las origins (development).

üìå Validaci√≥n:
- Siempre validar datos en el frontend antes de enviar
- El backend ya tiene validaciones con Bean Validation
- Sanitizar inputs para prevenir XSS

üìå Manejo de Errores:
- No exponer informaci√≥n sensible en mensajes de error
- Implementar retry logic para requests fallidos
- Timeout para requests largos

===============================================================================
üöÄ COMANDOS PARA EJECUTAR EL BACKEND
===============================================================================

üìå Desarrollo:
mvn spring-boot:run

üìå Build:
mvn clean package

üìå Docker (opcional):
docker build -t projectpruebasapis .
docker run -p 8080:8080 projectpruebasapis

üìå Testing:
mvn test

üìå Documentaci√≥n Swagger:
http://localhost:8080/swagger-ui.html

===============================================================================
üìö RECURSOS ADICIONALES
===============================================================================

üìå Documentaci√≥n Detallada: CRUD_DOCUMENTATION.md
üìå Swagger UI: http://localhost:8080/swagger-ui.html (cuando est√© corriendo)
üìå Arquitectura: Reactive Spring Boot con WebFlux
üìå Base de Datos: PostgreSQL en Neon Cloud
üìå APIs Externas: RapidAPI (AI Movie Recommender, JSearch)

===============================================================================
‚úÖ CHECKLIST PARA INTEGRACI√ìN FRONTEND
===============================================================================

‚ñ° Configurar base URL de la API
‚ñ° Implementar servicios HTTP (axios/fetch)
‚ñ° Crear interfaces TypeScript (si usas TypeScript)
‚ñ° Implementar manejo de errores global
‚ñ° Configurar interceptors para requests/responses
‚ñ° Implementar loading states
‚ñ° Crear componentes de UI para CRUD
‚ñ° Implementar validaci√≥n de formularios
‚ñ° A√±adir confirmaciones para acciones destructivas
‚ñ° Implementar b√∫squeda y filtros
‚ñ° Configurar routing
‚ñ° Implementar responsive design
‚ñ° A√±adir notificaciones toast/alerts
‚ñ° Implementar paginaci√≥n
‚ñ° Testing de integraci√≥n

===============================================================================
üéØ NOTAS IMPORTANTES
===============================================================================

1. Todas las operaciones son REACTIVAS (as√≠ncronas)
2. Eliminado L√ìGICO: los registros nunca se borran f√≠sicamente
3. Todas las respuestas usan el wrapper ApiResponse<T>
4. IDs √∫nicos por movieId y jobId para prevenir duplicados
5. Campos de auditor√≠a autom√°ticos (createdAt, updatedAt)
6. B√∫squedas locales vs b√∫squedas en APIs externas disponibles
7. Validaciones robustas en backend con Bean Validation
8. Manejo de errores detallado y consistente

===============================================================================
                            FIN DE ESPECIFICACIONES
===============================================================================

Este archivo contiene toda la informaci√≥n necesaria para desarrollar un frontend
completo que se integre perfectamente con el backend projectPruebasApis.

√öltima actualizaci√≥n: $(date)
Versi√≥n: 1.0
Autor: Sistema de Desarrollo